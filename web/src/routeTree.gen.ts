/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as IndexImport } from './routes/index'
import { Route as AdminToursImport } from './routes/admin/tours'
import { Route as AdminClientsImport } from './routes/admin/clients'
import { Route as AdminBookingsImport } from './routes/admin/bookings'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminToursRoute = AdminToursImport.update({
  id: '/tours',
  path: '/tours',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminClientsRoute = AdminClientsImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminBookingsRoute = AdminBookingsImport.update({
  id: '/bookings',
  path: '/bookings',
  getParentRoute: () => AdminRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/admin/bookings': {
      id: '/admin/bookings'
      path: '/bookings'
      fullPath: '/admin/bookings'
      preLoaderRoute: typeof AdminBookingsImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/clients': {
      id: '/admin/clients'
      path: '/clients'
      fullPath: '/admin/clients'
      preLoaderRoute: typeof AdminClientsImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/tours': {
      id: '/admin/tours'
      path: '/tours'
      fullPath: '/admin/tours'
      preLoaderRoute: typeof AdminToursImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminBookingsRoute: typeof AdminBookingsRoute
  AdminClientsRoute: typeof AdminClientsRoute
  AdminToursRoute: typeof AdminToursRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminBookingsRoute: AdminBookingsRoute,
  AdminClientsRoute: AdminClientsRoute,
  AdminToursRoute: AdminToursRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/clients': typeof AdminClientsRoute
  '/admin/tours': typeof AdminToursRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/clients': typeof AdminClientsRoute
  '/admin/tours': typeof AdminToursRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/clients': typeof AdminClientsRoute
  '/admin/tours': typeof AdminToursRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/admin/bookings'
    | '/admin/clients'
    | '/admin/tours'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/login'
    | '/admin/bookings'
    | '/admin/clients'
    | '/admin/tours'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/admin/bookings'
    | '/admin/clients'
    | '/admin/tours'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/bookings",
        "/admin/clients",
        "/admin/tours"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/admin/bookings": {
      "filePath": "admin/bookings.tsx",
      "parent": "/admin"
    },
    "/admin/clients": {
      "filePath": "admin/clients.tsx",
      "parent": "/admin"
    },
    "/admin/tours": {
      "filePath": "admin/tours.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
